/**
* This module gets the cron and worker invocations and starts the Jobs as needed
* 
*/
var nconf = require('nconf');
var shakengo = require('shakengo');
var amqp = require('amqp');

function Scheduler(db) {
    this.db = db;
    this.logger = new shakengo.SchedulerLog();
    this.logger.level = "TRACE";
    this.logger.jobInfo.queue = nconf.get("rabbit:queue:name");
}

/**
* 
* @param jobDescriptionId
*/
Scheduler.prototype.startJob = function (jobDescriptionId) {
    var that = this;
    var jobDescriptionCollection = this.db.get('JobDescriptionCollection');
    jobDescriptionCollection.findById(jobDescriptionId, {}, function (e, jobDescription) {
        if (jobDescription) {
            var job = new shakengo.Job();
            job.status = 0;
            job.started = new Date();
            job.component = jobDescription.components.shift();
            job.jobDescription = jobDescription;
            var jobCollection = that.db.get('JobCollection');
            jobCollection.insert(job, {}, function (err, doc) {
                that.logger.jobInfo.jobDescriptionId = job.jobDescription._id;
                that.logger.jobInfo.jobId = job._id;
                that.logger.jobInfo.process = "startjob";
                if (err) {
                    that.logger.log(nconf.get('label:jobstarterror') + ' : ' + err);
                }
                else {
                    that.logger.log(nconf.get('label:jobstart'));
                    that.queueJob(job);
                }
            });
        }
    });
};

/**
* 
* @param job
*/
Scheduler.prototype.processJob = function (job) {
    var that = this;
    this.logger.jobInfo.jobDescriptionId = job.jobDescription._id;
    this.logger.jobInfo.jobId = job._id;
    this.logger.jobInfo.process = "processJob";
    var requeue = true;
    if (job.errorFlag == true) {
        that.logger.log(nconf.get('label:jobhaserrorflag'));
        job.status = 3;
        requeue = false;
    } else {
        if (job.jobDescription.components.length > 0) {
            job.status = 1;
            job.component = job.jobDescription.components.shift();
        }
        else {
            that.logger.log(nconf.get('label:jobhasnoitems'));
            job.status = 2;
            job.finished = new Date();
            job.component = {};
            requeue = false;
        }
    }


    var jobCollection = that.db.get('JobCollection');
    jobCollection.updateById(job._id, job, function (err, doc) {
        if (err) {
            that.logger.log(nconf.get('label:jobupdatingerror'));
        }
        else {
            if (requeue) {
                that.queueJob(job);
            }
        }
    });
};

/**
* 
* @param job
*/
Scheduler.prototype.queueJob = function (job) {
    var that = this;
    this.logger.jobInfo.jobDescriptionId = job.jobDescription._id;
    this.logger.jobInfo.jobId = job._id;
    this.logger.jobInfo.process = "queueJob";
    var connection = amqp.createConnection(nconf.get("rabbit:connection"));
    connection.addListener("ready", function () {
        var exchange = connection.exchange(nconf.get("rabbit:exchange:name"), nconf.get("rabbit:exchange:options"));
        exchange.on('open', function () {
            console.log("[x] Conexion al Exchange");
            this.publish(nconf.get("rabbit:exchange:routingKey"), job, {}, function (error) {
                if (error) {
                    that.logger.log(nconf.get('label:jobsenttoqueueerror') + ' : ' + error);
                }
                else {
                    that.logger.log(nconf.get('label:jobsenttoqueue'));
                }

            });
        });
    });
    connection.end();
};


module.exports = Scheduler;